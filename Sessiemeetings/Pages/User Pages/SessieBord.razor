@page "/SessiesBord"
@inject NavigationManager NavigationManager
@inject ClassLibrary.Services.AppData AppData
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<IdentityUser> UserManager
@using Microsoft.AspNetCore.Identity
@using ClassLibrary.Models
@using ClassLibrary
@using ClassLibrary.Services
<h1>Sessies Bord</h1>

<h4>Huidige Sessies</h4>

@if (Sessies == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" PageSize="12" AllowPaging="true" Data="@Sessies" TItem="SessionModel" ColumnWidth="200px">
        <Columns>
            <RadzenGridColumn TItem="SessionModel" Property="SessionName" Title="Naam" />
            <RadzenGridColumn TItem="SessionModel" Property="SessionDesc" Title="Beschrijving" />
            <RadzenGridColumn TItem="SessionModel" Property="SessionAddress" Title="Locatie" />
            <RadzenGridColumn TItem="SessionModel" Property="AvailableSpots" Title="Beschikbare plekken" />
            <RadzenGridColumn TItem="SessionModel" Property="SessionDate" Title="Datum" />
            <RadzenGridColumn TItem="SessionModel" Property="StartingTime" Title="Begin tijd" />
            <RadzenGridColumn TItem="SessionModel" Title="Aanmelden" Context="sessie" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
                <Template Context="sessie">
                    @if (Int32.Parse(sessie.AvailableSpots) > 0 & AanmeldingBeschikbaar(sessie))
                    {
                        <RadzenButton Icon="done" Size="ButtonSize.Small" Click="@(args => loadAanmeldPagina(sessie))">
                        </RadzenButton>
                    }
                    else
                    {

                    }
                </Template>
            </RadzenGridColumn>


        </Columns>
    </RadzenGrid>
}
@code {

    private IEnumerable<string>[] SessionList;
    private IEnumerable<string>[] AanmeldingenList;
    private List<SessionModel> Sessies;
    public string sessieId;
    public List<SessieAanmelding> Aanmeldingen;
    public string User;
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        User = authState.User.Identity.Name;
        Sessies = new List<SessionModel>();
        Aanmeldingen = new List<SessieAanmelding>();
        DbConnection getList = new DbConnection();
        SessionList = getList.GetSessionsList();
        AanmeldingenList = getList.GetAanmeldingen();

        for (int i = 0; i < SessionList[0].Count(); i++)
        {
            Sessies.Add(new SessionModel(SessionList[0].ElementAt(i), SessionList[1].ElementAt(i), SessionList[2].ElementAt(i), SessionList[3].ElementAt(i), SessionList[4].ElementAt(i), SessionList[5].ElementAt(i), SessionList[6].ElementAt(i), SessionList[7].ElementAt(i)));
        }

        for (int i = 0; i < AanmeldingenList[0].Count(); i++)
        {
            if (AanmeldingenList[0].ElementAt(i) == User)
            {
                Aanmeldingen.Add(new SessieAanmelding(AanmeldingenList[0].ElementAt(i), AanmeldingenList[1].ElementAt(i), AanmeldingenList[2].ElementAt(i), bool.Parse(AanmeldingenList[3].ElementAt(i))));
            }
        }


    }

    public bool AanmeldingBeschikbaar(SessionModel Sessie)
    {
        foreach (SessieAanmelding aanmelding in Aanmeldingen)
        {
            if (aanmelding.UserId == User & aanmelding.SessieId == Sessie.SessionId)
            {
                return false;
            }
        }
        return true;
    }


    public void loadAanmeldPagina(SessionModel Sessie)
    {
        AppData.Sessie = Sessie;
        NavigationManager.NavigateTo("/SessieAanmeldPage");
    }
}
