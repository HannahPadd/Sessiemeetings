@page "/scheduler"
@inject DialogService DialogService
@using ClassLibrary.Models
@using Radzen.Blazor
@using Radzen




<RadzenTemplateForm TItem="Appointment" Name="Scheduler" AdditionalSourceCodePages=@(new List<string>() { "AddAppointmentPage.razor", "EditAppointmentPage.razor" })>
    <div class="row">
        <div class="col-xl-6">
            <RadzenScheduler @ref=@scheduler style="height: 768px;" TItem="Appointment" Data=@appointments StartProperty="Start" EndProperty="End"
                             TextProperty="Text" SelectedIndex="2"
                             SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender>
                <RadzenDayView />
                <RadzenWeekView />
                <RadzenMonthView />
            </RadzenScheduler>
        </div>
        <div class="col-xl-6">
            
        </div>
    </div>
</RadzenTemplateForm>

    @code {
        RadzenScheduler<Appointment> scheduler;
        //EventConsole console;
        Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

        IList<Appointment> appointments = new List<Appointment>
    {
    new Appointment { Start = DateTime.Today.AddDays(-2), End = DateTime.Today.AddDays(-2), Text = "Kennissessie" },
    //new Appointment { Start = DateTime.Today.AddDays(-11), End = DateTime.Today.AddDays(-10), Text = "Dag vrij" },
    //new Appointment { Start = DateTime.Today.AddDays(-10), End = DateTime.Today.AddDays(-8), Text = "Thuiswerk" },
    new Appointment { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(12), Text = "Online sessie" },
    //new Appointment { Start = DateTime.Today.AddHours(16), End = DateTime.Today.AddHours(13), Text = "Online sessie 2" },
    //new Appointment { Start = DateTime.Today.AddHours(14), End = DateTime.Today.AddHours(14).AddMinutes(30), Text = "Kennissessie 2" },
    //new Appointment { Start = DateTime.Today.AddDays(1), End = DateTime.Today.AddDays(12), Text = "Vakantie" },
    };

        async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
        {
            //console.Log($"SlotSelect: Start={args.Start} End={args.End}");

            Appointment data = await DialogService.OpenAsync<AddAppointmentPage>("Add Appointment",
                new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

            if (data != null)
            {
                appointments.Add(data);
                // Either call the Reload method or reassign the Data property of the Scheduler
                //??
                await scheduler.Reload();
            }
        }

        async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
        {
            //console.Log($"AppointmentSelect: Appointment={args.Data.Text}");

            await DialogService.OpenAsync<EditAppointmentPage>("Edit Appointment", new Dictionary<string, object> { { "Appointment", args.Data } });

            await scheduler.Reload();
        }

        void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
        {
            // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

            if (args.Data.Text == "Birthday")
            {
                args.Attributes["style"] = "background: red";
            }
        }
    }
