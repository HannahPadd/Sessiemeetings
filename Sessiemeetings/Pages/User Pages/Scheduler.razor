@page "/scheduler"
@inject DialogService DialogService
@using ClassLibrary.Models
@using ClassLibrary
@using Radzen.Blazor
@using Radzen




<RadzenTemplateForm TItem="Appointment" Name="Scheduler" AdditionalSourceCodePages=@(new List<string>() { "AddAppointmentPage.razor", "EditAppointmentPage.razor" })>
    <div class="row">
        <div class="col-xl-6">
            <RadzenScheduler @ref=@scheduler style="height: 768px;" TItem="Appointment" Data=@appointments StartProperty="Start" EndProperty="End"
                             TextProperty="Text" SelectedIndex="2"
                             SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender>
                <RadzenDayView />
                <RadzenWeekView />
                <RadzenMonthView />
            </RadzenScheduler>
        </div>
        <div class="col-xl-6">

        </div>
    </div>
</RadzenTemplateForm>

@code {
        RadzenScheduler<Appointment> scheduler;
        //EventConsole console;
        Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();
    private IEnumerable<string>[] List;
    public string User;
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    IList<Appointment> appointments = new List<Appointment> { };

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        User = authState.User.Identity.Name;
        DbConnection GetAppointment = new DbConnection();
        List = GetAppointment.GetSessionsOfUser(User);
        for (int i = 0; i < List[0].Count(); i++)
        {
            appointments.Add(new Appointment(List[0].ElementAt(i), List[2].ElementAt(i), DateTime.Parse(List[4].ElementAt(i)), DateTime.Parse(List[5].ElementAt(i))));
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        //console.Log($"SlotSelect: Start={args.Start} End={args.End}");

        Appointment data = await DialogService.OpenAsync<AddAppointmentPage>("Add Appointment",
            new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

        if (data != null)
        {
            appointments.Add(data);
            // Either call the Reload method or reassign the Data property of the Scheduler
            //??
            await scheduler.Reload();
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {
        //console.Log($"AppointmentSelect: Appointment={args.Data.Text}");

        await DialogService.OpenAsync<EditAppointmentPage>("Edit Appointment", new Dictionary<string, object> { { "Appointment", args.Data } });

        await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        if (args.Data.Text == "Birthday")
        {
            args.Attributes["style"] = "background: red";
        }
    }
}
