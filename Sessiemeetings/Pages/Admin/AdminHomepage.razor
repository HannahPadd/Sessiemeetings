@page "/adminhomepage"
@layout AdminLayout
@using System.Threading;
@implements IDisposable
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@inject UserManager<IdentityUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager


<!DOCTYPE html>
<html>
<head>
    <link rel="stylesheet" href="/css/CSS/style.css">
</head>
<body>
    <AuthorizeView>
        <Authorized>
            @if (@context.User.IsInRole(AdminRole))
            {
                
                <h1>Beheerders pagina</h1>

                <div class="card1">
                    <RadzenCard Style="width:300px; margin-bottom:20px; margin-right:20px; margin-top:50px; height: 200px">


                        <h3>Sessie's beheren</h3>
                        <h4>Hier kunt u de huidige sessie's bekijken en nieuwe sessie's toevoegen</h4>

                        <RadzenLink Path="sessions" Text="Klik hier" Style="color:#547733" />
                    </RadzenCard>

                </div>


                <div class="card2">
                    <RadzenCard Style="width:300px; margin-bottom:20px; margin-right:20px; margin-top:50px; height: 200px">


                        <h3>Formulieren beheren</h3>
                        <h4>Hier kunt u de huidige evaluatieformulieren bekijken en nieuwe formuleren toevoegen</h4>
                        <RadzenLink Path="CreateForm" Text="Klik hier" Style="color:#547733;" />
                    </RadzenCard>
                </div>
                <div class="card3">
                    <RadzenCard Style="width:300px; margin-bottom:20px; margin-right:20px; margin-top:50px; height: 200px">


                        <h3>Medewerkers beheren</h3>
                        <h4>Hier kunt u de geregistreerde mederwerkers bekijken en beheren</h4>
                        <RadzenLink Path="evaluatieform1" Text="Klik hier" Style="color:#547733" />
                    </RadzenCard>
                </div>

                <div class="stick-to-right">
                    <RadzenRadialGauge Style="width: 100%; height: 300px;">
                        <RadzenRadialGaugeScale Step="1" Min="0" Max="12" StartAngle="0" EndAngle="360" ShowFirstTick="false"
                                                MinorStep=@minorStep
                                                TickLength="20"
                                                MinorTickLength="10"
                                                TickLabelOffset="40"
                                                TickPosition="GaugeTickPosition.Inside">
                            <RadzenRadialGaugeScalePointer Value=@hours Length="0.6" ShowValue="false" />
                            <RadzenRadialGaugeScalePointer Value=@seconds Length="0.9" Fill="red" Width="2" ShowValue="false" />
                            <RadzenRadialGaugeScalePointer Value=@minutes Length="0.8" ShowValue="false" />
                        </RadzenRadialGaugeScale>
                    </RadzenRadialGauge>
                </div>


            }
            else
            {
                <h3>U bent niet ingelogd als @AdminRole.</h3>
            }
        </Authorized>
        <NotAuthorized>
            <h3>U bent niet ingelogd.</h3>
            <RadzenLink Path="/Identity/Account/Login" Text="Klik hier om in te loggen." />

        </NotAuthorized>
    </AuthorizeView>
</body>

</html>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string AdminRole = "administrator";
    System.Security.Claims.ClaimsPrincipal CurrentUser;
    protected override async Task OnInitializedAsync()
    {
        // ensure there is a AdminRole
        var RoleResult = await _RoleManager.FindByNameAsync(AdminRole);
        if (RoleResult == null)
        {
            // Create AdminRole
            await _RoleManager.CreateAsync(new IdentityRole(AdminRole));
        }
        // Ensure a user named admin@cimsolution.nl is an Administrator
        var user = await _UserManager.FindByNameAsync("admin@cimsolutions.nl");
        if (user != null)
        {
            // Is admin@cimsolutions.nl in administrator role?
            var UserResult = await _UserManager.IsInRoleAsync(user, AdminRole);
            if (!UserResult)
            {
                // Put admin in Administrator role
                await _UserManager.AddToRoleAsync(user, AdminRole);
            }
        }
        // Get the current logged in user
        CurrentUser = (await authenticationStateTask).User;
    }
    // Able to edit current user
    IdentityUser objUser = new IdentityUser();

    // Gets role placement for current role
    string CurrentUserRole { get; set; } = "Users";

    // Collection to display the existing users
    List<IdentityUser> ColUsers = new List<IdentityUser>();

    // Options to display in the roles dropdown when editing a user
    List<string> Options = new List<string>() { "Users", "administrator" };

    // To hold any possible errors
    string strError = "";

    // To enable showing the Popup
    bool ShowPopup = false;

    Timer timer;
    double hours;
    double minutes;
    double seconds;

    double minorStep = 12 / 60.0;

    protected override void OnInitialized()
    {
        timer = new Timer(state =>
        {
            var now = DateTime.Now;

            hours = now.Hour + now.Minute / 60.0;
            minutes = now.Minute * minorStep + now.Second * 12 / 3600.0;
            seconds = now.Second * minorStep;
            InvokeAsync(StateHasChanged);
        }, null, 0, 1000);

    }
    public void Dispose()
    {
        timer.Dispose();
    }
}
