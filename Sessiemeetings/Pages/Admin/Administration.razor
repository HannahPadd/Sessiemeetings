@page "/administration"
@layout AdminLayout
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@inject UserManager<IdentityUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider

    <!DOCTYPE html>
    <html>
    <head>
        <link rel="stylesheet" href="/css/CSS/style.css">
    </head>
    <body>

        <h3>Gebruikers beheren</h3>

        <AuthorizeView>
            <Authorized>
                @if (@context.User.IsInRole(AdminRole))
                {
                    <table class="table">
                        <thead>
                            <tr>
                                @*<th>Id</th>*@
                                <th>User Name</th>
                                <th>Email</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in ColUsers)
                            {
                                <tr>
                                    @*<td>@user.Id.Substring(0, 5) ...</td>*@
                                    <td>@user.UserName</td>
                                    <td>@user.Email</td>
                                    <td>
                                        <button class="btn btn-primary"
                                                @onclick="(() => EditUser(user))">
                                            Bewerken
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    @if (ShowPopup)
                    {
                        //Popup voor edit of nieuwe gebruiker
                        <div class="modal" tabindex="-1" style="display:block" role="dialog">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h3 class="modal-title">Edit User</h3>
                                        @*Knop om popup te sluiten*@
                                        <button type="button" class="close"
                                                @onclick="ClosePopup">
                                            <span aria-hidden="true">X</span>
                                        </button>
                                    </div>

                                    <div class="modal-body">

                                        @if (objUser.Id != "")
                                        {
                                            <p>@objUser.Id</p>
                                        }

                                        <input class="form-control" type="text"
                                                   placeholder="UserName"
                                                   @bind="objUser.UserName" />
                                        <input class="form-control" type="text"
                                               placeholder="Email"
                                               @bind="objUser.Email" />
                                        <input class="form-control" type="password"
                                               placeholder="Password"
                                               @bind="objUser.PasswordHash" />
                                        <select class="form-control"
                                                @bind="@CurrentUserRole">
                                            @foreach (var option in Options)
                                            {
                                                <option value="@option">
                                                    @option
                                                </option>
                                            }
                                        </select>
                                        <br /><br />

                                        <button class="btn btn-primary"
                                                @onclick="SaveUser">
                                            Opslaan
                                        </button>

                                        @if (objUser.Id != "")
                                        {
                                            //Knop om te deleten
                                            <button class="btn btn-danger"
                                                    @onclick="DeleteUser">
                                                Verwijderen
                                            </button>
                                        }
                                        <br />
                                        <span style="color:red">@strError</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    <button class="btn btn-success" @onclick="AddNewUser">Gebruiker toevoegen</button>
                }
                else
                {
                    <p>U bent niet ingelogd als @AdminRole.</p>
                }
            </Authorized>
            <NotAuthorized>
                <p>U bent niet ingelogd.</p>
            </NotAuthorized>
        </AuthorizeView>
</body>
</html>
        @code {
            [CascadingParameter]
            private Task<AuthenticationState> authenticationStateTask { get; set; }
            string AdminRole = "administrator";
            System.Security.Claims.ClaimsPrincipal CurrentUser;
            protected override async Task OnInitializedAsync()
            {
                // Is er een AdminRole?
                var RoleResult = await _RoleManager.FindByNameAsync(AdminRole);
                if (RoleResult == null)
                {
                    // AdminRole aanmaken
                    await _RoleManager.CreateAsync(new IdentityRole(AdminRole));
                }
                // Zorg dat admin@cimsolution.nl een admin is
                var user = await _UserManager.FindByNameAsync("admin@cimsolutions.nl");
                if (user != null)
                {
                    //  Is admin@cimsolutions.nl admin?
                    var UserResult = await _UserManager.IsInRoleAsync(user, AdminRole);
                    if (!UserResult)
                    {
                        // Voeg toe aan AdminRole
                        await _UserManager.AddToRoleAsync(user, AdminRole);
                    }
                }
                // Huidige user ophalen
                CurrentUser = (await authenticationStateTask).User;


                GetUsers();
            }

            // Mogelijkheid user aan te passen
            IdentityUser objUser = new IdentityUser();

            // Wat is de role van currentuser?
            string CurrentUserRole { get; set; } = "Users";

            // Display currentusers
            List<IdentityUser> ColUsers = new List<IdentityUser>();

            // Role dropdown
            List<string> Options = new List<string>() { "Users", "administrator" };

            // Error check
            string strError = "";

            // Pop up showen
            bool ShowPopup = false;

            void ClosePopup()
            {
                // Popup sluiten
                ShowPopup = false;
            }

            public void GetUsers()
            {
                // Errors clearen
                strError = "";
                ColUsers = new List<IdentityUser>();
                // Users uit User_Manager
                var user = _UserManager.Users.Select(x => new IdentityUser
                {
                    Id = x.Id,
                    UserName = x.UserName,
                    Email = x.Email,
                    PasswordHash = "*****"
                });
                foreach (var item in user)
                {
                    ColUsers.Add(item);
                }
            }
            void AddNewUser()
            {
                // Maak user aan
                objUser = new IdentityUser();
                objUser.PasswordHash = "*****";
                // Id = blank
                objUser.Id = "";
                // Open popup
                ShowPopup = true;
            }

            async Task SaveUser()
            {
                try
                {
                    if (objUser.Id != "")
                    {
                        // Huidige useer
                        var user = await _UserManager.FindByIdAsync(objUser.Id);
                        // Update Username
                        user.UserName = objUser.UserName;
                        // Update Email
                        user.Email = objUser.Email;
                        // Update user
                        await _UserManager.UpdateAsync(user);
                        if (objUser.PasswordHash != "*****")
                        {
                            var resetToken =
                                await _UserManager.GeneratePasswordResetTokenAsync(user);
                            var passworduser =
                                await _UserManager.ResetPasswordAsync(
                                    user,
                                    resetToken,
                                    objUser.PasswordHash);
                            if (!passworduser.Succeeded)
                            {
                                if (passworduser.Errors.FirstOrDefault() != null)
                                {
                                    strError =
                                        passworduser
                                        .Errors
                                        .FirstOrDefault()
                                        .Description;
                                }
                                else
                                {
                                    strError = "Pasword error";
                                }
                                return;
                            }
                        }

                        // Is user in AdminRole?
                        var UserResult =
                            await _UserManager
                            .IsInRoleAsync(user, AdminRole);
                        // Is Admin geselecteerd maar user is geen admin?
                        if (
                            (CurrentUserRole == AdminRole)
                            &
                            (!UserResult))
                        {
                            // voeg toe aan AdminRole
                            await _UserManager
                                .AddToRoleAsync(user, AdminRole);
                        }
                        else
                        {
                            // Is AdminRole niet geselecteerd maar de user is admin?
                            if ((CurrentUserRole != AdminRole)
                                &
                                (UserResult))
                            {
                                // Verwijder uit AdminRole
                                await _UserManager
                                    .RemoveFromRoleAsync(user, AdminRole);
                            }
                        }
                    }
                    else
                    {
                        // Voeg nieuwe gebruiker toe
                        var NewUser =
                            new IdentityUser
                            {
                                UserName = objUser.UserName,
                                Email = objUser.Email
                            };
                        var CreateResult =
                            await _UserManager
                            .CreateAsync(NewUser, objUser.PasswordHash);
                        if (!CreateResult.Succeeded)
                        {
                            if (CreateResult
                                .Errors
                                .FirstOrDefault() != null)
                            {
                                strError =
                                    CreateResult
                                    .Errors
                                    .FirstOrDefault()
                                    .Description;
                            }
                            else
                            {
                                strError = "Create error";
                            }
                            return;
                        }
                        else
                        {

                            if (CurrentUserRole == AdminRole)
                            {

                                await _UserManager
                                    .AddToRoleAsync(NewUser, AdminRole);
                            }
                        }
                    }
                    ShowPopup = false;
                    GetUsers();
                }
                catch (Exception ex)
                {
                    strError = ex.GetBaseException().Message;
                }
            }

            async Task EditUser(IdentityUser _IdentityUser)
            {

                objUser = _IdentityUser;

                var user = await _UserManager.FindByIdAsync(objUser.Id);
                if (user != null)
                {

                    var UserResult =
                        await _UserManager
                        .IsInRoleAsync(user, AdminRole);
                    if (UserResult)
                    {
                        CurrentUserRole = AdminRole;
                    }
                    else
                    {
                        CurrentUserRole = "Users";
                    }
                }
                ShowPopup = true;
            }

            async Task DeleteUser()
            {
                ShowPopup = false;

                var user = await _UserManager.FindByIdAsync(objUser.Id);
                if (user != null)
                {

                    await _UserManager.DeleteAsync(user);
                }
                GetUsers();
            }
        }
