@page "/administration"
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@inject UserManager<IdentityUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Administration</h3>

<AuthorizeView>
    <Authorized>
        @if (@context.User.IsInRole(AdminRole))
        {
            <p>You are in @AdminRole </p>
        }
        else
        {
            <p>You're not signed in as a user in @AdminRole.</p>
        }
    </Authorized>
    <NotAuthorized>
        <p>You're not loggged in.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string AdminRole = "Administrators";
    System.Security.Claims.ClaimsPrincipal CurrentUser;
    protected override async Task OnInitializedAsync()
    {
        // ensure there is a AdminRole
        var RoleResult = await _RoleManager.FindByNameAsync(AdminRole);
        if (RoleResult == null)
        {
            // Create AdminRole
            await _RoleManager.CreateAsync(new IdentityRole(AdminRole));
        }
        // Ensure a user named admin@cimsolution.nl is an Administrator
        var user = await _UserManager.FindByNameAsync("admin@cimsolution.nl");
        if (user != null)
        {
            // Is Admin@BlazorHelpWebsite.com in administrator role?
            var UserResult = await _UserManager.IsInRoleAsync(user, AdminRole);
            if (!UserResult)
            {
                // Put admin in Administrator role
                await _UserManager.AddToRoleAsync(user, AdminRole);
            }
        }
        // Get the current logged in user
        CurrentUser = (await authenticationStateTask).User;
    }
}
